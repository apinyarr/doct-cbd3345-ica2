---
name: "ICA2 - Group C"
on:
  push: 
    branches:
      - 'develop'
    tags:
      - 'v*'

jobs:
  build:
    name: Build distribution
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/job-description-print-action
      with:
        description-msg: 'Build Python Package'
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install -r requirement.txt
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
  
  # publish-to-pypi:
  #   name: >-
  #     Publish Python üêç distribution üì¶ to PyPI
  #   if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
  #   needs:
  #   - build
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: pypi
  #     url: https://pypi.org/p/<package-name>  # Replace <package-name> with your PyPI project name
  #   permissions:
  #     id-token: write  # IMPORTANT: mandatory for trusted publishing

  #   steps:
  #   - name: Download all the dists
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: python-package-distributions
  #       path: dist/
  #   - name: Publish distribution üì¶ to PyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python üêç distribution üì¶ with Sigstore
      and upload them to GitHub Release
    needs:
    # - publish-to-pypi
    - build
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/job-description-print-action
      with:
        description-msg: 'Release the Package to GitHub'
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'

  # publish-to-testpypi:
  #   name: Publish Python üêç distribution üì¶ to TestPyPI
  #   needs:
  #   - build
  #   runs-on: ubuntu-latest

  #   environment:
  #     name: testpypi
  #     url: https://test.pypi.org/p/<package-name>

  #   permissions:
  #     id-token: write  # IMPORTANT: mandatory for trusted publishing

  #   steps:
  #   - name: Download all the dists
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: python-package-distributions
  #       path: dist/
  #   - name: Publish distribution üì¶ to TestPyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       repository-url: https://test.pypi.org/legacy/

  run-with-service-container:
    name: Run application with a service container (MongoDB)
    needs: 
      - github-release
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0.4-jammy
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name mongodb
        ports:
          - 27017:27017
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - uses: ./.github/actions/job-description-print-action
        with:
          description-msg: 'Use MongoDB Service Container for app to access'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.x'

      # - name: Install Python Requirements
      #   run: |
      #     pip3 install -r requirement.txt
      #     pip3 freeze

      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Install package
        run: |
          pip3 install dist/*.whl  # Replace with your package file name
          pip3 freeze

      - name: Run App for DB Connecting Test
        run: python3 app.py &

      - name: Test App
        run: "curl --location 'http://127.0.0.1:8081/plot' --header 'Content-Type: application/json' --data '{ \"xmin\": 50,\"xmax\": 100,\"ymin\": 50,\"ymax\": 100 }'"

      - name: Verify new collection in MongoDB
        # run: 'docker ps -a'
        run: "docker exec mongodb mongosh --eval 'db.wordscollection.find()' dictionary"